
import Pkg; Pkg.activate(@__DIR__)
using BilinearControl
using BilinearControl.RD
using BilinearControl.TO
import BilinearControl.RD
import BilinearControl.TO
using Altro
using BilinearControl.Problems
using BilinearControl: Problems
using MeshCat
using Plots
using RobotZoo

## Visualization
model = RobotZoo.Pendulum()
visdir = joinpath(@__DIR__, "../examples/visualization/")
include(joinpath(visdir, "visualization.jl"))
vis = Visualizer()
open(vis)
delete!(vis)
set_pendulum!(vis)

## Original Model
prob = Problems.PendulumProblem(N=61, u_bnd=5.0)
dmodel = TO.get_model(prob,1)
X0 = TO.states(prob)
visualize!(vis, model, TO.get_final_time(prob), X0)

altro = ALTROSolver(prob)
solve!(altro)
X = TO.states(altro)
U = TO.controls(altro)
t = TO.gettimes(altro)
plot(t, X)
plot(t[1:end-1], U)
visualize!(vis, model, TO.get_final_time(prob), X)

## Plot output using Bilinear Model 
const datadir = joinpath(dirname(pathof(BilinearControl)), "../data/")
model_bilinear = EDMDModel(joinpath(datadir, "pendulum_eDMD_data.jld2"))
z0 = expandstate(model_bilinear, prob.x0)

compare_models(RD.InPlace(), model_bilinear, dmodel, TO.get_initial_state(prob), 
    TO.get_final_time(prob), U, doplot=true)

## Solve with Bilinear Model 
model_bilinear = Problems.BilinearPendulum()
prob_bilinear = Problems.BilinearPendulumProblem(constraints=true, u_bnd=8)
altro_bilinear = ALTROSolver(prob_bilinear, verbose=4)
solve!(altro_bilinear)

Z_bl = TO.states(altro_bilinear)
X_bl = map(x->model_bilinear.g * x, Z_bl)
U_bl = TO.controls(altro_bilinear)
t_bl = TO.gettimes(altro_bilinear)

X_mat_bl = reduce(hcat, X_bl)
U_mat_bl = reduce(hcat, U_bl)
plot(t_bl, X_mat_bl', label="")
plot(t_bl[1:end-1], U_mat_bl', label="")
visualize!(vis, model, TO.get_final_time(prob_bilinear), X_bl)

## Track with TVLQR 
struct BilinearTVLQRController{L} <: AbstractController
    model::L
    K::Vector{Matrix{Float64}}
    Zref::Vector{Vector{Float64}}
    Uref::Vector{Vector{Float64}}
    t::Vector{Float64}
end
get_k(ctrl::BilinearTVLQRController, t) = searchsortedfirst(ctrl.t, t)

function getcontrol(ctrl::BilinearTVLQRController, x, t)
    k = get_k(ctrl, t)
    z = expandstate(ctrl.model, x)
    dx = z - ctrl.Zref[k]
    ctrl.Uref[k] + ctrl.K[k]*dx
end

K = Matrix.(Altro.get_ilqr(altro_bilinear).K)
Z_bl[1]
ctrl = BilinearTVLQRController(model_bilinear, K, 
    Vector.(Z_bl), Vector.(RD.controls(altro_bilinear)), t_bl)
dt = prob.Z[1].dt

function simulatewithcontroller(sig::RD.FunctionSignature, 
                                model::RD.DiscreteDynamics, ctrl, x0, 
                                tf, dt)
    times = range(0, tf, step=dt)
    m = RD.control_dim(model)
    N = length(times)
    X = [copy(x0) for k = 1:N]
    U = [zeros(m) for k = 1:N-1]
    for k = 1:N-1 
        t = times[k]
        dt = times[k+1] - times[k]
        u = getcontrol(ctrl, X[k], t)
        U[k] = u
        RD.discrete_dynamics!(sig, model, X[k+1], X[k], u, times[k], dt)
    end
    X,U
end

X_sim, = simulatewithcontroller(RD.InPlace(), dmodel, ctrl, 
    prob.x0, TO.get_final_time(prob), dt)

t_sim = range(0, TO.get_final_time(prob), step=dt)
X_sim_mat = reduce(hcat, X_sim)
plot(t_sim, X_sim_mat')
X_sim[end]

compare_models(RD.InPlace(), model_bilinear, dmodel, TO.get_initial_state(prob), 
    TO.get_final_time(prob), U_bl, doplot=true)